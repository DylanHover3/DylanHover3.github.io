<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>HyperEcho</title>
        <description>Homebase for cloud solution projects and innovative technology blogs!</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Wed, 19 Feb 2025 14:56:59 -0600</pubDate>
        <lastBuildDate>Wed, 19 Feb 2025 14:56:59 -0600</lastBuildDate>
        <generator>Jekyll v4.3.3</generator>
        
            <item>
                <title>Streamlining Credential Management in Azure AD App Registrations</title>
                <description>&lt;p&gt;Organizations leveraging Azure AD App Registrations rely heavily on client secrets and certificates for secure authentication between applications and services. However, these credentials have expiration dates that, if left unchecked, can lead to service outages, security risks, and administrative burden.&lt;/p&gt;

&lt;p&gt;Manually tracking the expiration of these secrets and certificates introduces significant operational overhead, especially in large enterprises where there may be hundreds or thousands of app registrations. Administrators must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Regularly review each app registration in Azure AD.&lt;/li&gt;
  &lt;li&gt;Identify expiring secrets and certificates in a timely manner.&lt;/li&gt;
  &lt;li&gt;Notify relevant teams to update credentials before expiration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Failure to proactively manage these expirations can result in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Application downtime due to expired authentication credentials.&lt;/li&gt;
  &lt;li&gt;Security vulnerabilities caused by outdated secrets lingering in production environments.&lt;/li&gt;
  &lt;li&gt;Increased workload for IT teams responding to last-minute failures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To mitigate these risks, organizations need an automated solution that continuously monitors Azure AD secrets and certificates, providing timely notifications.&lt;/p&gt;

&lt;h2 id=&quot;automating-expiration-monitoring-with-microsoft-graph-powershell-sdk&quot;&gt;Automating Expiration Monitoring with Microsoft Graph PowerShell SDK&lt;/h2&gt;

&lt;p&gt;A more scalable approach to tracking app secrets and certificates involves leveraging the Microsoft Graph PowerShell SDK. With a PowerShell script, we can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Connect to Microsoft Graph.&lt;/li&gt;
  &lt;li&gt;Retrieve all Azure AD App Registrations.&lt;/li&gt;
  &lt;li&gt;Identify secrets and certificates that are nearing expiration.&lt;/li&gt;
  &lt;li&gt;Send an automated email notification with a summary of expiring credentials.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/Workstation-1.jpg&quot; alt=&quot;Computer&quot; /&gt;
&lt;em&gt;Photo by &lt;a href=&quot;https://unsplash.com/@domenicoloia&quot;&gt;Domenico Loia&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-powershell-script&quot;&gt;Understanding the PowerShell Script&lt;/h2&gt;

&lt;p&gt;This script automates the expiration tracking process and includes key functionalities:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Connects to Microsoft Graph API using a provided Tenant ID, Client ID, and Client Secret.&lt;/li&gt;
  &lt;li&gt;Retrieves all Azure AD App Registrations.&lt;/li&gt;
  &lt;li&gt;Extracts all secrets and certificates from the applications.&lt;/li&gt;
  &lt;li&gt;Filters out expired or soon-to-expire credentials, based on a user-defined threshold (e.g., 30 days).&lt;/li&gt;
  &lt;li&gt;Formats the data into a readable table.&lt;/li&gt;
  &lt;li&gt;Sends an email notification to administrators with the expiration details.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-the-script-works&quot;&gt;How the Script Works&lt;/h2&gt;

&lt;h3 id=&quot;1-defining-parameters&quot;&gt;1. Defining Parameters&lt;/h3&gt;

&lt;p&gt;The script accepts key parameters to customize execution:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$DaysToCheck – Specifies how many days ahead to look for expiring credentials.&lt;/li&gt;
  &lt;li&gt;$SendEmail – A switch to enable email notifications.&lt;/li&gt;
  &lt;li&gt;$EmailTo – The recipient email address for notifications.&lt;/li&gt;
  &lt;li&gt;$EmailFrom – The sender’s email (UPN or Object ID).&lt;/li&gt;
  &lt;li&gt;$TenantId, $ClientId, $ClientSecret – Used to authenticate against Microsoft Graph.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-connecting-to-microsoft-graph&quot;&gt;2. Connecting to Microsoft Graph&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Connect-MgGraph -TenantId $TenantId -ClientId $ClientId -ClientSecret $ClientSecret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command authenticates to Microsoft Graph with the necessary permissions to read App Registration details.&lt;/p&gt;

&lt;h3 id=&quot;3-retrieving-azure-ad-app-registrations&quot;&gt;3. Retrieving Azure AD App Registrations&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$apps = Get-MgApplication -All
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This retrieves all applications registered in Azure AD.&lt;/p&gt;

&lt;h3 id=&quot;4-extracting-expiring-secrets-and-certificates&quot;&gt;4. Extracting Expiring Secrets and Certificates&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$expiringSecrets = $apps | Where-Object {
    $_.PasswordCredentials | Where-Object { $_.EndDateTime -lt (Get-Date).AddDays($DaysToCheck) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This filters client secrets that are expiring within the specified timeframe.&lt;/p&gt;

&lt;h3 id=&quot;5-sending-an-email-notification&quot;&gt;5. Sending an Email Notification&lt;/h3&gt;

&lt;p&gt;If the $SendEmail flag is enabled, the script formats the expiring credentials into an email-friendly format and sends a notification using Microsoft Graph’s email API:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Send-MgUserMail -UserId $EmailFrom -Message @{ ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sample-email-output&quot;&gt;Sample Email Output&lt;/h2&gt;

&lt;p&gt;When the script detects an expiring credential, it generates an email similar to this:&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Manually tracking Azure AD App Registration secrets and certificates is not scalable for enterprise environments. By leveraging Microsoft Graph PowerShell SDK, administrators can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Automate expiration monitoring.&lt;/li&gt;
  &lt;li&gt;Reduce operational overhead.&lt;/li&gt;
  &lt;li&gt;Ensure proactive notifications to prevent outages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This script provides a robust solution to managing Azure AD credentials efficiently, ensuring security and continuity in enterprise environments. Consider scheduling this script as a daily or weekly automation using Azure Automation or a scheduled task to keep your environment secure.&lt;/p&gt;
</description>
                <pubDate>Wed, 19 Feb 2025 05:50:00 -0600</pubDate>
                <link>http://localhost:4000/posts/steamlining-credential-management-for-azure-ad-apps</link>
                <guid isPermaLink="true">http://localhost:4000/posts/steamlining-credential-management-for-azure-ad-apps</guid>
                
                <category>Administration</category>
                
                <category>Microsoft Graph</category>
                
                <category>Azure AD</category>
                
                <category>Entra</category>
                
                
            </item>
        
            <item>
                <title>Introducing Azure Network Security Perimeter</title>
                <description>&lt;p&gt;As organizations continue their migration to the cloud, securing the digital estate becomes increasingly complex. Microsoft’s new Azure Network Security Perimeter is designed to address these challenges by providing a unified, policy-driven approach to isolate and protect resources. In this article, we explore what the network security perimeter is, how it differs from existing Azure network security tools, its relationship to Private Endpoints, and provide an example of deploying it in an existing environment.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-azure-network-security-perimeter&quot;&gt;What Is the Azure Network Security Perimeter?&lt;/h2&gt;

&lt;p&gt;The Azure Network Security Perimeter is a new security construct that allows you to define a clear boundary around your cloud resources. It implements a zero-trust security model by ensuring that only explicitly permitted traffic can enter or leave the designated perimeter. Key characteristics include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Policy-Driven Isolation: Rather than managing disparate rules across multiple network security groups (NSGs) or firewalls, you define a centralized set of policies that govern ingress and egress traffic.&lt;/li&gt;
  &lt;li&gt;Integrated Protection: Leveraging underlying Azure backbone services, the perimeter integrates with Azure Firewall, NSGs, and threat detection tools (such as Azure Sentinel) to offer comprehensive security.&lt;/li&gt;
  &lt;li&gt;Consistent Enforcement: The perimeter provides consistent, end-to-end protection across multiple resource types, whether they’re virtual machines, databases, or PaaS services, ensuring that all resources within the boundary adhere to the same security posture.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-it-differs-from-existing-azure-network-security-tools&quot;&gt;How It Differs from Existing Azure Network Security Tools&lt;/h2&gt;

&lt;p&gt;Azure has long offered various tools to secure networks, including NSGs, Azure Firewall, and Application Gateway. However, the network security perimeter introduces several improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unified Security Model: Instead of managing separate configurations for different services, the perimeter unifies security enforcement. This reduces complexity and the potential for misconfigurations.&lt;/li&gt;
  &lt;li&gt;Scope and Granularity: Traditional NSGs and firewalls operate at the subnet or resource level. The network security perimeter works across an entire defined boundary, allowing you to protect multiple resource groups or virtual networks under a single umbrella.&lt;/li&gt;
  &lt;li&gt;Dynamic Policy Enforcement: Built with modern cloud architectures in mind, the perimeter dynamically applies security policies as resources scale or change, ensuring continuous compliance without manual intervention.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/Workstation-1.jpg&quot; alt=&quot;Computer&quot; /&gt;
&lt;em&gt;Photo by &lt;a href=&quot;https://unsplash.com/@domenicoloia&quot;&gt;Domenico Loia&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;comparison-with-private-endpoints&quot;&gt;Comparison with Private Endpoints&lt;/h2&gt;

&lt;p&gt;Both Azure Private Endpoints and the network security perimeter aim to reduce exposure to the public internet, but they do so in different ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Private Endpoints:
    &lt;ul&gt;
      &lt;li&gt;Focus: Enable secure, private connectivity to specific PaaS services (like Azure Storage, SQL Database, etc.) by mapping them into your virtual network.&lt;/li&gt;
      &lt;li&gt;Use Case: Ideal for connecting individual services without routing traffic over the public internet.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Network Security Perimeter:
    &lt;ul&gt;
      &lt;li&gt;Focus: Provides a broad, overarching security boundary for a collection of resources, whether or not they are using private endpoints.&lt;/li&gt;
      &lt;li&gt;Use Case: Best suited for scenarios where you need to enforce a consistent set of policies across a wide array of services, integrating both IaaS and PaaS, and ensuring that only approved traffic can cross the boundary.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While Private Endpoints secure the connectivity of specific services, the network security perimeter offers holistic protection by defining an entire zone of trust—ensuring that all resources within that zone adhere to the same strict access policies.&lt;/p&gt;

&lt;h2 id=&quot;deploying-the-network-security-perimeter-in-an-existing-azure-environment&quot;&gt;Deploying the Network Security Perimeter in an Existing Azure Environment&lt;/h2&gt;

&lt;p&gt;Let’s walk through an example of how to deploy the network security perimeter using Azure CLI. In this scenario, assume you have an existing resource group (MyResourceGroup) and virtual network (MyVNet).&lt;/p&gt;

&lt;h3 id=&quot;step-1-define-your-allowed-and-denied-ip-ranges&quot;&gt;Step 1: Define Your Allowed and Denied IP Ranges&lt;/h3&gt;

&lt;p&gt;Decide which IP ranges should have access to the resources inside your perimeter. For example, you might allow internal corporate IPs while denying all others by default.&lt;/p&gt;

&lt;h3 id=&quot;step-2-create-the-network-security-perimeter&quot;&gt;Step 2: Create the Network Security Perimeter&lt;/h3&gt;

&lt;p&gt;Using Azure CLI, you can create a perimeter resource and attach it to your virtual network. Below is a hypothetical command (note that the exact CLI syntax may evolve; refer to the latest Microsoft documentation for current details):&lt;/p&gt;

&lt;p&gt;In Bash&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az network security-perimeter create &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; MySecurityPerimeter &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--resource-group&lt;/span&gt; MyResourceGroup &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--vnet&lt;/span&gt; MyVNet &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--allowed-ip-ranges&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;10.1.0.0/16,192.168.1.0/24&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--default-action&lt;/span&gt; Deny
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-3-associate-resources-with-the-perimeter&quot;&gt;Step 3: Associate Resources with the Perimeter&lt;/h3&gt;

&lt;p&gt;Once the perimeter is in place, you need to ensure that your resources (such as VMs, databases, and other services) are tagged or associated with the perimeter. This might be done via ARM templates or additional CLI commands. For example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az resource update &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--ids&lt;/span&gt; /subscriptions/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;sub-id&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/resourceGroups/MyResourceGroup/providers/Microsoft.Compute/virtualMachines/MyVM &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--set&lt;/span&gt; properties.networkSecurityPerimeterId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/subscriptions/{sub-id}/resourceGroups/MyResourceGroup/providers/Microsoft.Network/securityPerimeters/MySecurityPerimeter&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-4-monitor-and-adjust-policies&quot;&gt;Step 4: Monitor and Adjust Policies&lt;/h3&gt;

&lt;p&gt;After deployment, continuously monitor network traffic and review logs using Azure Monitor and Azure Sentinel. Adjust your allowed and denied rules as needed to respond to evolving threats or changes in your environment.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The Azure Network Security Perimeter represents a significant step forward in cloud security by providing a comprehensive, policy-driven approach to protect your resources. By unifying network security controls, it simplifies management compared to traditional tools while offering enhanced protection—complementing solutions like Private Endpoints. As organizations continue to adopt cloud-first strategies, this new perimeter model is set to become a cornerstone of Azure security best practices.&lt;/p&gt;

&lt;p&gt;For the latest syntax, features, and best practices, always refer to the official Microsoft documentation on Azure Network Security Perimeter.&lt;/p&gt;
</description>
                <pubDate>Mon, 10 Feb 2025 06:01:35 -0600</pubDate>
                <link>http://localhost:4000/posts/introducing-azure-network-security-perimeter</link>
                <guid isPermaLink="true">http://localhost:4000/posts/introducing-azure-network-security-perimeter</guid>
                
                <category>Security</category>
                
                <category>New Features</category>
                
                <category>Virtual Networks</category>
                
                
            </item>
        
            <item>
                <title>Deploying Cloud PKI</title>
                <description>&lt;h2 id=&quot;the-challenges-of-on-premises-certificate-management&quot;&gt;The Challenges of On-Premises Certificate Management&lt;/h2&gt;

&lt;p&gt;Managing on-premises Certificate Authorities (CAs) has become increasingly challenging in today’s IT environment. Traditional systems demand extensive hardware, software, and administrative resources to ensure high availability and security. As organizations shift toward hybrid and cloud-first strategies, extending certificate services to remote devices adds complexity, often leading to inefficiencies and vulnerabilities. Maintaining these legacy systems can strain IT teams and limit their ability to address other critical business needs.&lt;/p&gt;

&lt;p&gt;Intune’s Cloud Public Key Infrastructure (PKI) offers a modern solution by streamlining certificate management through Microsoft’s trusted cloud infrastructure. This approach reduces overhead, enhances scalability, and improves security while simplifying certificate deployment across devices. By eliminating the need for physical hardware and complex configurations, Intune’s PKI empowers organizations to focus on their core objectives, making certificate provisioning efficient and secure.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-root-ca-in-cloud-pki&quot;&gt;Creating a Root CA in Cloud PKI&lt;/h3&gt;

&lt;p&gt;The first step in deploying Intune’s Cloud PKI is creating the Root and Issuing Certificate Authorities. When it comes to setting up the CA hierarchy, you can either BYOCA (Bring Your Own CA) or set up the Root CA directly within your Intune instance. For simplicity, we will be setting up the latter solution.&lt;/p&gt;

&lt;p&gt;To begin, navigate to the Intune admin center and select Tenant Administration &amp;gt; Cloud PKI. From here, you can start configuring the Root Certificate Authority. Click on “Create” and select the Root CA option. Now specify the required settings such as certificate name, validity period, the extended key usage, and the subject attributes.&lt;/p&gt;

&lt;div class=&quot;gallery-box&quot;&gt;
  &lt;div class=&quot;gallery&quot;&gt;
    &lt;img src=&quot;/images/CloudPKI-01.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-02.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-24.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-23.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-22.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-14.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Make sure to include any EKU’s (Extended Key Usages) in the root CA that you are wanting to be made available to the issuing CA. Also keep in mind that Cloud PKI doesn’t support the “Any Purpose” EKU for their PKI’s. Once the Root CA is setup we will use it as the trust anchor for your PKI infrastructure. Once the CA is created select the CA and validate the Properties are what you are expecting. Make sure to download the Root CA from here as we will need it later.&lt;/p&gt;

&lt;div class=&quot;gallery-box&quot;&gt;
  &lt;div class=&quot;gallery&quot;&gt;
    &lt;img src=&quot;/images/CloudPKI-14.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configuring-an-issuing-ca-in-cloud-pki&quot;&gt;Configuring an Issuing CA in Cloud PKI&lt;/h3&gt;

&lt;p&gt;After establishing the Root CA, the next step is to configure the Issuing CA, which handles the actual certificate issuance for devices and users. In the Intune admin center, navigate back to Tenant Administration &amp;gt; Cloud PKI and select the option to create an Issuing CA. Provide a meaningful name for the Issuing CA and link it to the previously configured Root CA. Define the certificate template settings, including key usages, validity periods, and subject attributes specific to your organization’s needs. Ensure the Issuing CA is configured to include any EKUs required for the intended certificate purposes.&lt;/p&gt;

&lt;div class=&quot;gallery-box&quot;&gt;
  &lt;div class=&quot;gallery&quot;&gt;
    &lt;img src=&quot;/images/CloudPKI-21.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-20.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-19.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-18.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-17.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Once complete, the Issuing CA will be ready to distribute certificates based on the defined templates, streamlining secure certificate deployment across your device fleet. Again download the CA here for the next step.&lt;/p&gt;

&lt;div class=&quot;gallery-box&quot;&gt;
  &lt;div class=&quot;gallery&quot;&gt;
    &lt;img src=&quot;/images/CloudPKI-16.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;creating-windows-configuration-profiles-for-trusted-certificates&quot;&gt;Creating Windows Configuration Profiles for Trusted Certificates&lt;/h3&gt;

&lt;p&gt;Once the Root and Issuing CAs are configured, the next step is to deploy trusted certificates to Windows devices using Intune configuration profiles. Begin by navigating to the Intune admin center and selecting Devices &amp;gt; Configuration profiles &amp;gt; Create profile. Choose Windows 10 and later as the platform and select Trusted certificate as the profile type.&lt;/p&gt;

&lt;div class=&quot;gallery-box&quot;&gt;
  &lt;div class=&quot;gallery&quot;&gt;
    &lt;img src=&quot;/images/CloudPKI-25.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-15.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Create a profile for the Root CA first. Upload the Root CA’s certificate file (in .cer format) and assign the profile to the appropriate device groups. This ensures that all devices in the assigned groups trust the Root CA as a certificate authority. Once the proper assignment is completed hit the create button on the Review + Create tab.&lt;/p&gt;

&lt;div class=&quot;gallery-box&quot;&gt;
  &lt;div class=&quot;gallery&quot;&gt;
    &lt;img src=&quot;/images/CloudPKI-12.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-11.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-10.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Repeat the process to create a second configuration profile for the Issuing CA. Similarly, upload the Issuing CA’s certificate file and assign it to the same device groups or additional groups as necessary. By deploying these trusted certificate profiles, you establish a trust chain on Windows devices, allowing them to recognize and trust certificates issued by the Cloud PKI infrastructure. These profiles are critical for ensuring secure communication and authentication within your environment.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-configuration-profile-for-issuing-scep-certificates&quot;&gt;Creating a Configuration Profile for Issuing SCEP Certificates&lt;/h3&gt;

&lt;p&gt;To deploy SCEP certificates using Intune, you need to create a configuration profile that defines how devices will request and receive certificates. Note that you will need to create a SCEP Cert profile for each of the Certificate Stores, that is the Device Cert store as well as the User Cert store depending on what you are needing. Start by navigating to Devices &amp;gt; Configuration profiles &amp;gt; Create profile in the Intune admin center. Select Windows 10 and later as the platform and choose SCEP certificate as the profile type. Provide a name and description for the profile to ensure clarity in your configuration settings.&lt;/p&gt;

&lt;div class=&quot;gallery-box&quot;&gt;
  &lt;div class=&quot;gallery&quot;&gt;
    &lt;img src=&quot;/images/CloudPKI-08.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-07.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Next, configure the certificate settings. Specify the Certificate Type (User or Device) and the Subject name format, which changes depending on whether this is a User or Device certificate. There are specific placeholders that will fill in user or device specific identity information that can be used here. This will also be the default values that are used here. Likewise these same placeholders can be used for the SAN fields. Further elaboration on what placeholders can be used in the Subject and SAN fields are documented in the Intune SCEP certificate profile documentation. Define the Certificate validity period, Key storage provider, Key usage, Key size, and Hash algorithm to be used for these certificates ensuring they align with your security requirements. Then upload the Root CA that was downloaded when the Root CA was created. After the Root CA is uploaded select what EKUs that the certificate will be used for. Next, determine when the renewal threshhold will be for the certificates. The recommended renewal threshold is after 80% of the validity period of the certificate, which means we would want to leave 20%. After this period the device can request a new certificate to be issued from Intune. Lastly, provide the SCEP Server URL which can be found on the Issuing CA properties page in the Cloud PKI CA’s page.&lt;/p&gt;

&lt;div class=&quot;gallery-box&quot;&gt;
  &lt;div class=&quot;gallery&quot;&gt;
    &lt;img src=&quot;/images/CloudPKI-06.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-05.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-13.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Assign the SCEP profile to the appropriate device groups. This ensures that only authorized devices can request and receive certificates. Once deployed, Intune will automatically manage the certificate provisioning process, streamlining secure access and authentication for your devices.&lt;/p&gt;

&lt;div class=&quot;gallery-box&quot;&gt;
  &lt;div class=&quot;gallery&quot;&gt;
    &lt;img src=&quot;/images/CloudPKI-04.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
    &lt;img src=&quot;/images/CloudPKI-03.jpg&quot; loading=&quot;lazy&quot; alt=&quot;Post&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we’ve walked through the step-by-step process of deploying Intune’s Cloud PKI solution, starting with the creation of a Root CA and Issuing CA, followed by the deployment of trusted certificates, and concluding with the configuration of SCEP profiles for efficient certificate issuance. These steps ensure a seamless and secure certificate lifecycle management process that integrates smoothly with modern IT environments. By following these instructions, organizations can establish a robust and scalable PKI infrastructure that supports both managed and unmanaged devices.&lt;/p&gt;

&lt;p&gt;Certificates play a critical role in today’s IT infrastructure, underpinning secure communication, authentication, and data integrity. Modernizing certificate management through Intune’s Cloud PKI simplifies the deployment process, reduces administrative overhead, and enhances security. This approach empowers IT professionals to focus on strategic initiatives while minimizing vulnerabilities and ensuring streamlined, efficient device management in a rapidly evolving technological landscape. Changes&lt;/p&gt;
</description>
                <pubDate>Fri, 10 Jan 2025 06:01:35 -0600</pubDate>
                <link>http://localhost:4000/posts/deploying-cloud-pki</link>
                <guid isPermaLink="true">http://localhost:4000/posts/deploying-cloud-pki</guid>
                
                <category>Security</category>
                
                <category>Certificates</category>
                
                <category>MDM</category>
                
                
            </item>
        
    </channel>
</rss>